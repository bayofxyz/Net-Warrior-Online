using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Media;

namespace MMORPGCopierClient
{
    public class GameEquipmentBank
    {
        private Dictionary<short, GameEquipmentConfig> equipList;
        public GameEquipmentBank(ContentManager content)
        {
            equipList = new Dictionary<short, GameEquipmentConfig>();
        }

        public void Load(short key, GameEquipmentConfig cfg)
        {
            equipList.Add(key, cfg);
        }

        public String getEquipmentModelPath(short key)
        {
            GameEquipmentConfig cfg = null;
            if (equipList.TryGetValue(key, out cfg))
                return cfg.path;
            return null;
        }

        public Vector3 getEquipmentModelRotation(short key)
        {
            GameEquipmentConfig cfg = null;
            if (equipList.TryGetValue(key, out cfg))
                return cfg.Rotation;
            return Vector3.Zero;
        }

        public Vector3 getEquipmentModelPosition(short key)
        {
            GameEquipmentConfig cfg = null;
            if (equipList.TryGetValue(key, out cfg))
                return cfg.Position;
            return Vector3.Zero;
        }

        public float getEquipmentModelScale(short key)
        {
            GameEquipmentConfig cfg = null;
            if (equipList.TryGetValue(key, out cfg))
                return cfg.Scale;
            return 0;
        }

        public String getEquipmentModelClipName(short key, int state)
        {
            GameEquipmentConfig cfg = null;
            if (equipList.TryGetValue(key, out cfg))
            {
                String clipname = "";
                cfg.stateClip.TryGetValue((short)state, out clipname);
                return clipname;
            }
            return null;
        }

        public String getDropModelPath(short key)
        {
            GameEquipmentConfig cfg = null;
            if (equipList.TryGetValue(key, out cfg))
                return cfg.dropPath;
            return null;
        }

        public Vector3 getDropModelRotation(short key)
        {
            GameEquipmentConfig cfg = null;
            if (equipList.TryGetValue(key, out cfg))
                return cfg.dropRotation;
            return Vector3.Zero;
        }

        public Vector3 getDropModelPosition(short key)
        {
            GameEquipmentConfig cfg = null;
            if (equipList.TryGetValue(key, out cfg))
                return cfg.dropPosition;
            return Vector3.Zero;
        }

        public float getDropModelScale(short key)
        {
            GameEquipmentConfig cfg = null;
            if (equipList.TryGetValue(key, out cfg))
                return cfg.dropScale;
            return 0;
        }

        public String getName(short key)
        {
            GameEquipmentConfig cfg = null;
            if (equipList.TryGetValue(key, out cfg))
                return cfg.name;
            return null;
        }

        public String getDescription(short key)
        {
            GameEquipmentConfig cfg = null;
            if (equipList.TryGetValue(key, out cfg))
                return cfg.description;
            return null;
        }
        
        public GameEquipmentConfig getEquipmentConfig(short key)
        {
            GameEquipmentConfig cfg = null;
            equipList.TryGetValue(key, out cfg);
            return cfg;
        }
    }
}
