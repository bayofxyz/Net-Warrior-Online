using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Media;

namespace MMORPGCopierClient
{
    public class MapEntity
    {
        private int id;
        private Model model;
        private Matrix[] transforms;
        private ContentManager content;
        private Vector3 Position;
        private Vector3 Rotation;
        private float Scale;
        private String bgm;
        public MapEntity(int id, GameMapConfig cfg, ContentManager content)
        {
            this.id = id;
            this.content = content;
            this.model = content.Load<Model>(cfg.path);
            this.transforms = new Matrix[model.Bones.Count];
            this.model.CopyAbsoluteBoneTransformsTo(transforms);
            this.Position = cfg.Position;
            this.Rotation = cfg.Rotation;
            this.Scale = cfg.Scale;
            this.bgm = cfg.bgm;
        }

        public void Draw(Matrix view, Matrix projection)
        {
            // Draw the model. A model can have multiple meshes, so loop.
            if (model != null)
            {
                foreach (ModelMesh mesh in model.Meshes)
                {
                    // This is where the mesh orientation is set, as well 
                    // as our camera and projection.
                    foreach (BasicEffect effect in mesh.Effects)
                    {
                        effect.EnableDefaultLighting();
                        effect.World = transforms[mesh.ParentBone.Index]
                            * Matrix.CreateRotationX(MathHelper.ToRadians(Rotation.X))
                            * Matrix.CreateRotationY(MathHelper.ToRadians(Rotation.Y))
                            * Matrix.CreateRotationZ(MathHelper.ToRadians(Rotation.Z))
                            * Matrix.CreateScale(Scale)
                            * Matrix.CreateTranslation(Position);
                        effect.View = view;
                        effect.Projection = projection;

                        /*effect.DirectionalLight0.Direction = new Vector3(1, -1, 1);
                        effect.DirectionalLight0.Enabled = true;
                        effect.DirectionalLight0.DiffuseColor = new Vector3(0.9f, 0.9f, 0.9f);

                        effect.DirectionalLight1.Direction = new Vector3(-1, -1, -1);
                        effect.DirectionalLight1.Enabled = true;
                        effect.DirectionalLight1.DiffuseColor = new Vector3(0.9f, 0.9f, 0.9f);

                        effect.DirectionalLight2.Direction = new Vector3(-1, -1, 1);
                        effect.DirectionalLight2.Enabled = true;
                        effect.DirectionalLight2.DiffuseColor = new Vector3(0.9f, 0.9f, 0.9f);*/

                        effect.FogEnabled = true;
                        effect.FogEnd = 256;
                        effect.FogStart = 8;

                        effect.DiffuseColor = new Vector3(0.9f, 0.9f, 0.9f);
                        effect.SpecularColor = new Vector3(0.01f, 0.01f, 0.01f);
                        effect.SpecularPower = 20;
                        effect.PreferPerPixelLighting = true;

                        effect.AmbientLightColor = new Vector3(0.9f, 0.9f, 0.9f);
                    }
                    // Draw the mesh, using the effects set above.
                    mesh.Draw();
                }
            }
        }

        public String getBGM()
        {
            return bgm;
        }

        public Model getModel()
        {
            return model;
        }
    }
}
